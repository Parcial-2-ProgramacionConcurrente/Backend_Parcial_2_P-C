@startuml
!define RECTANGLE class
skinparam backgroundColor #F5F5F5
skinparam shadowing false
skinparam class {
    BackgroundColor #ADD8E6
    BorderColor #2E8B57
    FontSize 12
    FontStyle bold
}
skinparam arrow {
    FontSize 11
}

' === PAQUETE DOMAIN ===
package domain {
    class FabricaGauss {
        + Integer id
        + String nombre
        + OffsetDateTime dateCreated
        + iniciarProduccion(): Mono<Void>
        + detenerSimulacion(): Mono<Void>
    }

    class GaltonBoard {
        + Integer id
        + int numBolas
        + int numContenedores
        + String estado
        + Distribucion distribucion
        + simularCaidaDeBolas(): Mono<Void>
    }

    class Distribucion {
        + Integer id
        + Map<String, Integer> datos
        + int numBolas
        + int numContenedores
        + agregarBola(int contenedorId): Mono<Void>
        + obtenerDistribucion(): Mono<Map<String, Integer>>
    }

    class GaltonBoardStatus {
        + Integer id
        + String estado
        + Map<String, Integer> distribucionActual
    }

    class Maquina {
        + Integer id
        + String tipo
        + int numeroComponentesRequeridos
        + List<Componente> componentes
        + Map<String, Integer> distribucion
        + String estado
        + GaltonBoard galtonBoard
        + ensamblarMaquina(): Mono<Void>
    }

    class MaquinaDistribucionNormal {
        + double media
        + double desviacionEstandar
        + int maximoValor
    }

    Maquina <|-- MaquinaDistribucionNormal

    class Componente {
        + Integer id
        + String tipo
        + double valorCalculado
        + registrarValor(double valor): Mono<Void>
    }

    class ComponenteWorker {
        + Integer id
        + Componente componente
        + MaquinaWorker maquinaWorker
        + GaltonBoard galtonBoard
        + boolean trabajoCompletado
        + run(): Mono<Void>
        + calcularValor(): Mono<Double>
    }

    class MaquinaWorker {
        + Integer id
        + List<ComponenteWorker> componenteWorkers
        + Maquina maquina
        + ExecutorService executor
        + run(): Mono<Void>
    }

    FabricaGauss "1" --> "1..*" GaltonBoard
    GaltonBoard "1" --> "1" Distribucion
    GaltonBoard "1" --> "1" GaltonBoardStatus
    FabricaGauss "1" --> "1..*" Maquina
    Maquina "1" --> "1..*" Componente
    Maquina "1" --> "1..*" MaquinaWorker
    MaquinaWorker "1" --> "1..*" ComponenteWorker
    Maquina "1" --> "1" GaltonBoard
}

' === PAQUETE SERVICE ===
package service {

    class FabricaGaussService {

      - MaquinaRepository maquinaRepository
      - ComponenteRepository componenteRepository
      - FabricaGaussRepository fabricaGaussRepository
      - MaquinaWorkerService maquinaWorkerService
      - RabbitMQService rabbitMQService
      - GaltonBoardService galtonBoardService

      + void iniciarAplicacion()
      + Mono<FabricaGaussDTO> createFabrica(FabricaGaussDTO fabricaGaussDTO)
      + Flux<FabricaGaussDTO> findAllFabricas()
      + Mono<FabricaGaussDTO> findFabricaById(String id)
      + Mono<Void> deleteFabricaById(String id)
      + Mono<FabricaGaussDTO> updateFabrica(String id, FabricaGaussDTO fabricaGaussDTO)
      + Mono<Void> iniciarProduccionCompleta()
      + Mono<Void> verificarEstadoSimulacion()
      + void iniciarListenerProgresoSimulacion()
      + void iniciarListenerAlertas()
      + Mono<Void> actualizarComponentesConDistribucion(String maquinaId, GaltonBoard galtonBoard)
      - Mono<GaltonBoard> obtenerOGenerarGaltonBoard(FabricaGauss fabrica, double media, double desviacionEstandar)
      - FabricaGaussDTO mapToDTO(FabricaGauss fabrica)
      - FabricaGauss mapToEntity(FabricaGaussDTO fabricaGaussDTO)
    }


    class GaltonBoardService {

      -WebClient webClient
      -GaltonBoardRepository galtonBoardRepository
      -RabbitMQService rabbitMQService
      -ExecutorService executorService
      -AtomicBoolean procesandoSimulacion
      -AtomicBoolean distribucionActualizando

      + GaltonBoardService(galtonBoardRepository: GaltonBoardRepository, rabbitMQService: RabbitMQService, webClientBuilder: WebClient.Builder)
      + simularCaidaDeBolas(galtonBoard: GaltonBoard, media: double, desviacionEstandar: double): Mono<Void>
      + obtenerGaltonBoardPorId(id: String): Mono<GaltonBoard>
      + esperarSimulacionCompletada(): Mono<Void>
      + guardarGaltonBoard(galtonBoard: GaltonBoard): Mono<GaltonBoard>
      + mostrarDistribucion(distribucion: Map<String, Integer>): Mono<Map<String, Integer>>
      + actualizarDistribucion(galtonBoard: GaltonBoard, nuevaDistribucion: Map<String, Integer>): Mono<Void>
      + esperarDistribucionActualizada(): Mono<Void>
      + obtenerGaltonBoardPorFabricaId(fabricaId: String): Mono<GaltonBoard>
      + crearGaltonBoardParaFabrica(fabrica: FabricaGauss, media: double, desviacionEstandar: double): Mono<GaltonBoard>
      - enviarNotificacionSimulacionCompleta(galtonBoardId: String, distribucion: Map<String, Integer>): Mono<Void>
      - mapToDTO(galtonBoard: GaltonBoard): GaltonBoardDTO
      - mapToEntity(galtonBoardDTO: GaltonBoardDTO): GaltonBoard
      }


    class MaquinaWorkerService {
        - componenteWorkerRepository: ComponenteWorkerRepository
        - maquinaWorkerRepository: MaquinaWorkerRepository
        - maquinaRepository: MaquinaRepository
        - galtonBoardRepository: GaltonBoardRepository
        - componenteWorkerService: ComponenteWorkerService
        - galtonBoardService: GaltonBoardService
        - fabricaGaussService: FabricaGaussService

        + iniciarTrabajo(maquinasIds: List<String>, galtonBoard: GaltonBoard): Mono<Void>
        + obtenerOCrearMaquinaWorker(maquina: Maquina, galtonBoard: GaltonBoard): Mono<MaquinaWorker>
        + ensamblarMaquina(maquinaWorker: MaquinaWorker): Mono<Void>
        + obtenerComponenteWorkers(componenteWorkerIds: List<String>): Mono<List<ComponenteWorker>>
    }


    class ComponenteWorkerService {
        - componenteRepository: ComponenteRepository
        - rabbitMQService: RabbitMQService
        - galtonBoardService: GaltonBoardService
        - executorService: ExecutorService

        + procesarComponente(componenteWorker: ComponenteWorker, galtonBoard: GaltonBoard): Mono<ComponenteWorker>
        + calcularValor(componenteWorker: ComponenteWorker, galtonBoard: GaltonBoard): Mono<Double>
        + registrarValor(componente: Componente, valor: double): Mono<Void>
        - enviarNotificacionDeCompletado(): Mono<Void>
    }


    class RabbitMQService {
        - rabbitTemplate: RabbitTemplate
        - messageListenerContainer: MessageListenerContainer
        - executorService: ExecutorService
        - messageSink: Sinks.Many<String>

        + enviarMensaje(queue: String, mensaje: String): Mono<Void>
        + recibirMensaje(queue: String): Mono<String>
        + iniciarListener(queueName: String, callback: Consumer<String>): void
        + obtenerMensajesRecibidos(): Flux<String>
        - shutdown(): void
    }


    FabricaGaussService --> FabricaGaussRepository : "Accede a la base de datos para gestionar FabricaGauss"
    FabricaGaussService --> MaquinaRepository : "Gestiona datos de las máquinas asociadas"
    FabricaGaussService --> ComponenteRepository : "Administra componentes de la fábrica"
    FabricaGaussService --> MaquinaWorkerService : "Asigna y coordina trabajo de las máquinas"
    FabricaGaussService --> RabbitMQService : "Envía eventos de la fábrica a RabbitMQ"
    FabricaGaussService --> GaltonBoardService : "Llama a métodos para simular tableros de Galton"
    FabricaGaussService --> FabricaGaussDTO : "Convierte FabricaGauss a DTO"
    FabricaGaussService --> FabricaGauss : "Manipula entidades FabricaGauss"
    FabricaGaussService --> GaltonBoard : "Asocia tableros de Galton a la fábrica"

    GaltonBoardService --> GaltonBoardRepository : "Accede a la base de datos para gestionar tableros"
    GaltonBoardService --> RabbitMQService : "Notifica eventos de simulación a RabbitMQ"
    GaltonBoardService --> GaltonBoard : "Gestiona lógica y estado de tableros"
    GaltonBoardService --> GaltonBoardDTO : "Convierte GaltonBoard a DTO"
    GaltonBoardService --> Distribucion : "Manipula distribuciones de bolas"
    GaltonBoardService --> FabricaGauss : "Asocia tableros con fábricas"
    GaltonBoardService --> WebClient : "Llama a otros servicios para datos de tableros"

    MaquinaWorkerService --> ComponenteWorkerRepository
    MaquinaWorkerService --> MaquinaWorkerRepository
    MaquinaWorkerService --> MaquinaRepository
    MaquinaWorkerService --> GaltonBoardRepository
    MaquinaWorkerService --> ComponenteWorkerService
    MaquinaWorkerService --> GaltonBoardService
    MaquinaWorkerService --> FabricaGaussService
    MaquinaWorkerService ..> Maquina
    MaquinaWorkerService ..> MaquinaWorker
    MaquinaWorkerService ..> ComponenteWorker
    MaquinaWorkerService ..> GaltonBoard

    ComponenteWorkerService --> ComponenteRepository
    ComponenteWorkerService --> RabbitMQService
    ComponenteWorkerService --> GaltonBoardService
    ComponenteWorkerService ..> ComponenteWorker
    ComponenteWorkerService ..> GaltonBoard
    ComponenteWorkerService ..> Componente

    RabbitMQService --> RabbitTemplate
    RabbitMQService --> MessageListenerContainer
    RabbitMQService --> Sinks
    RabbitMQService ..> Flux
    RabbitMQService ..> Mono
}

' === PAQUETE AOP ===
package aop {
    class ErrorHandlingAspect {
        + aroundAllMethods(): void
    }

    class SynchronizationAspect {
        + ensureConsistency(): void
    }

    class PerformanceMonitoringAspect {
        + monitorPerformance(): void
    }

    ErrorHandlingAspect --> service.FabricaGaussService : "Manejo de errores en producción"
    ErrorHandlingAspect --> service.GaltonBoardService : "Manejo de errores en simulación"
    ErrorHandlingAspect --> service.MaquinaWorkerService : "Manejo de errores en ensamblaje"
    SynchronizationAspect --> service.FabricaGaussService : "Sincronización de producción"
    SynchronizationAspect --> service.GaltonBoardService : "Sincronización de simulación"
    SynchronizationAspect --> service.MaquinaWorkerService : "Sincronización de ensamblaje"
    PerformanceMonitoringAspect --> service.FabricaGaussService : "Monitoreo de rendimiento en producción"
}

' === PAQUETE CONTROLLER ===
package controller {

    class AuthController {
        - authService: AuthService
        --
        + AuthController(authService: AuthService)
        + login(loginRequest: LoginRequestDTO): Mono<ResponseEntity<AuthResponseDTO>>
        + register(registerRequest: RegisterRequestDTO): Mono<ResponseEntity<AuthResponseDTO>>
    }


    class FabricaGaussController {
            - fabricaGaussService: FabricaGaussService
            - galtonBoardService: GaltonBoardService
            --
            + findAllFabricas(): Flux<FabricaGaussDTO>
            + findFabricaById(id: String): Mono<ResponseEntity<FabricaGaussDTO>>
            - mapToDTO(galtonBoard: GaltonBoard): GaltonBoardDTO
            + obtenerGaltonBoardPorFabricaId(id: String): Mono<ResponseEntity<GaltonBoardDTO>>
            + iniciarProduccionCompleta(): Mono<Void>
        }


    class GaltonBoardController {
        - galtonBoardService: GaltonBoardService
        --
        + GaltonBoardController(galtonBoardService: GaltonBoardService)
        + bolasPorContenedor(galtonBoardId: String): Mono<ResponseEntity<Map<String, Integer>>>
        + mostrarDistribucion(galtonBoardId: String): Mono<ResponseEntity<Map<String, Integer>>>
    }

    class HtmxErrorController {
            - errorAttributes: ErrorAttributes
            --
            + HtmxErrorController(errorAttributes: ErrorAttributes)
            + errorWebExceptionHandler(): ErrorWebExceptionHandler
        }


    class RabbitMQMessageController {
        - rabbitMQService: RabbitMQService
        --
        + RabbitMQMessageController(rabbitMQService: RabbitMQService)
        + getReceivedMessages(): Flux<String>
    }

    class UsuarioController {
        - usuarioService: UsuarioService
        --
        + getAll(): Flux<Usuario>
        + getById(id: String): Mono<ResponseEntity<Usuario>>
        + create(usuarioDTO: UsuarioDTO): Mono<UsuarioDTO>
        + update(id: String, usuarioActualizadoDTO: UsuarioDTO): Mono<ResponseEntity<UsuarioDTO>>
        + delete(id: String): Mono<ResponseEntity<Void>>
    }


    class WebController {
        --
        + index(): Mono<String>
    }


    AuthController --> AuthService
    AuthController --> LoginRequestDTO
    AuthController --> RegisterRequestDTO
    AuthController --> AuthResponseDTO

    FabricaGaussController --> FabricaGaussService
    FabricaGaussController --> GaltonBoardService
    FabricaGaussController --> FabricaGaussDTO
    FabricaGaussController --> GaltonBoardDTO
    FabricaGaussController --> GaltonBoard

    GaltonBoardController --> GaltonBoardService
    GaltonBoardService --> GaltonBoard
    GaltonBoard --> Distribucion

    HtmxErrorController --> ErrorAttributes
    HtmxErrorController --> ErrorWebExceptionHandler

    RabbitMQMessageController --> RabbitMQService

    UsuarioController --> UsuarioService
    UsuarioController --> Usuario
    UsuarioController --> UsuarioDTO


}

' === PAQUETE REPOSITORY ===
package repository {
    interface FabricaGaussRepository {
        + save(FabricaGauss): Mono<FabricaGauss>
        + findById(String): Mono<FabricaGauss>
    }

    interface GaltonBoardRepository {
        + save(GaltonBoard): Mono<GaltonBoard>
        + findById(String): Mono<GaltonBoard>
    }

    interface DistribucionRepository {
        + save(Distribucion): Mono<Distribucion>
        + findById(String): Mono<Distribucion>
    }

    interface MaquinaWorkerRepository {
        + save(MaquinaWorker): Mono<MaquinaWorker>
        + findById(String): Mono<MaquinaWorker>
    }

    interface ComponenteRepository {
        + save(Componente): Mono<Componente>
        + findById(String): Mono<Componente>
    }
}

' === PAQUETE DTO ===
package dto {
    class FabricaGaussDTO {
        - Integer id
        - String nombre
        - OffsetDateTime dateCreated
    }

    class GaltonBoardDTO {
        - Integer id
        - int numBolas
        - int numContenedores
        - String estado
        - Map<String, Integer> distribucion
    }

    class MaquinaDTO {
        - Integer id
        - String tipo
        - String estado
        - Map<String, Integer> distribucion
    }

    class DistribucionDTO {
        - Map<String, Integer> contenedores
    }
}

dto.FabricaGaussDTO <.. domain.FabricaGauss
dto.GaltonBoardDTO <.. domain.GaltonBoard
dto.MaquinaDTO <.. domain.Maquina
dto.DistribucionDTO <.. domain.Distribucion
@enduml

